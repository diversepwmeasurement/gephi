jobs:
  build-base:
    outputs:
      project-version: ${{ steps.project.outputs.version }}
      staging-repository-id: ${{ steps.create-nexus-staging.outputs.staging-repository-id
        }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up Maven Central Repository
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: temurin
        gpg-passphrase: GPG_PASSPHRASE
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        java-version: '11'
        server-id: ossrh
        server-password: OSSRH_PASS
        server-username: OSSRH_USER
    - continue-on-error: true
      name: Setup Maven
      uses: stCarolas/setup-maven@v.4.5
      with:
        maven-version: 3.8.7
    - continue-on-error: true
      id: project
      name: Extract Maven project version
      run: echo ::set-output name=version::$(mvn help:evaluate -Dexpression=project.version
        -q -DforceStdout)
    - continue-on-error: true
      name: Get NBM Keystore
      run: 'echo "${{ secrets.NBM_KEYSTORE }}" > keystore.ks.asc

        gpg -d --passphrase "${{ secrets.NBM_KEYSTORE_ENC_PASSPHRASE }}" --batch keystore.ks.asc
        > keystore.ks

        '
    - continue-on-error: true
      env:
        OSSRH_PASS: ${{ secrets.OSSRH_TOKEN_PASSWD }}
        OSSRH_STAGING_PROFILE_ID: ${{ secrets.OSSRH_STAGING_PROFILE_ID }}
        OSSRH_USER: ${{ secrets.OSSRH_TOKEN_USER }}
      id: create-nexus-staging
      if: ${{ !endsWith(steps.project.outputs.version, '-SNAPSHOT') }}
      name: Create Nexus Staging Repository
      run: "stagingRepositoryId=$(mvn -B org.sonatype.plugins:nexus-staging-maven-plugin:1.6.12:rc-open\
        \ -DstagingProfileId=$OSSRH_STAGING_PROFILE_ID -DnexusUrl=https://oss.sonatype.org/\
        \ -DserverId=ossrh -DopenedRepositoryMessageFormat='stagingRepositoryId=%s'\
        \ | grep -o 'stagingRepositoryId=.*' | cut -f2 -d=)\necho \"Created Nexus\
        \ Staging Repository Id: $stagingRepositoryId\"\n\nif [ \"$(echo $stagingRepositoryId\
        \ | grep -o \"\\-\" | wc -l)\" != \"1\" ]; then\n  echo \"Nexus repository\
        \ creation failed\"\n  exit 1\nfi\necho \"staging_repository_id=$stagingRepositoryId\"\
        \ >> $GITHUB_ENV\necho \"::set-output name=staging-repository-id::$stagingRepositoryId\"\
        \n"
    - continue-on-error: true
      env:
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        OSSRH_PASS: ${{ secrets.OSSRH_TOKEN_PASSWD }}
        OSSRH_USER: ${{ secrets.OSSRH_TOKEN_USER }}
      name: Build and publish modules
      run: mvn -T 4 --batch-mode -Djava.awt.headless=true -Dkeystore.password=${{
        secrets.KEYSTORE_PASSWD }} -DstagingRepositoryId=${{ env.staging_repository_id
        }} site deploy -P deployment,sign-artifacts,create-modules,create-sources,create-javadoc,create-autoupdate
    - continue-on-error: true
      name: Upload autoupdate output
      uses: actions/upload-artifact@v3
      with:
        if-no-files-found: error
        name: autoupdate-output
        path: modules/application/target/autoupdate_site
        retention-days: 1
    - continue-on-error: true
      name: Prepare modules output
      run: tar -I 'zstd -9 -T0' -cf /tmp/modules.tar.zst -C ~/.m2/repository/org/gephi
        .
    - continue-on-error: true
      name: Upload modules output
      uses: actions/upload-artifact@v3
      with:
        if-no-files-found: error
        name: modules-output
        path: /tmp/modules.tar.zst
        retention-days: 1
  bundle:
    needs: build-base
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up Maven Central Repository
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        gpg-passphrase: GPG_PASSPHRASE
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
        java-version: '11'
        server-id: ossrh
        server-password: OSSRH_PASS
        server-username: OSSRH_USER
    - continue-on-error: true
      if: runner.os == 'macOS'
      name: Install MacOS requirements
      run: brew install gnupg@1.4
    - continue-on-error: true
      env:
        ENCRYPTION_SECRET: ${{ secrets.ENCRYPTION_SECRET }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      if: runner.os == 'macOS'
      name: Apple Developer Certificates
      run: 'gpg1 --output .github/workflows/release/certs/dev_id.cer --passphrase
        "$ENCRYPTION_SECRET" --decrypt .github/workflows/release/certs/dev_id.cer.enc

        gpg1 --output .github/workflows/release/certs/dev_id.p12 --passphrase "$ENCRYPTION_SECRET"
        --decrypt .github/workflows/release/certs/dev_id.p12.enc

        ./.github/workflows/release/add-key.sh

        '
    - continue-on-error: true
      if: runner.os == 'macOS'
      name: MacOS hdiutil workaround
      run: 'echo killing...; sudo pkill -9 XProtect >/dev/null || true;

        echo waiting...; while pgrep XProtect; do sleep 3; done;

        '
    - continue-on-error: true
      env:
        CODESIGN_CERT: ${{ secrets.CODESIGN_CERT}}
      if: runner.os == 'Windows'
      name: Windows Prepare Codesign
      run: 'New-Item -ItemType directory -Path certificate

        Set-Content -Path codesign.txt -Value $env:CODESIGN_CERT

        certutil -decode codesign.txt codesign.pfx

        Remove-Item codesign.txt

        '
      working-directory: modules/application
    - continue-on-error: true
      name: Retrieve modules output
      uses: actions/download-artifact@v3
      with:
        name: modules-output
    - continue-on-error: true
      if: runner.os == 'Linux'
      name: Extract artifacts Linux
      run: 'mkdir -p ~/.m2/repository/org/gephi/

        tar --zstd -xf modules.tar.zst -C ~/.m2/repository/org/gephi

        '
    - continue-on-error: true
      if: runner.os == 'macOS'
      name: Extract artifacts Mac OS
      run: 'mkdir -p ~/.m2/repository/org/gephi/

        unzstd -c modules.tar.zst | tar -x -C ~/.m2/repository/org/gephi

        '
    - continue-on-error: true
      if: runner.os == 'Windows'
      name: Extract artifacts Windows
      run: 'mkdir -p ~/.m2/repository/org/gephi/

        tar --zstd -xf modules.tar.zst -C ~/.m2/repository/org/gephi

        '
      shell: bash
    - continue-on-error: true
      env:
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APPLE_USERNAME: ${{ secrets.APPLE_USERNAME }}
        CODESIGN_PASSWORD: ${{ secrets.CODESIGN_PASSWORD }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        OSSRH_PASS: ${{ secrets.OSSRH_TOKEN_PASSWD }}
        OSSRH_USER: ${{ secrets.OSSRH_TOKEN_USER }}
      name: Build and publish bundle
      run: mvn --batch-mode -Djava.awt.headless=true -Dgephi.apple.notarization.username=$APPLE_USERNAME
        -Dgephi.apple.notarization.password=$APPLE_PASSWORD -Dgephi.apple.notarization.teamId=$APPLE_TEAM_ID
        -Dgephi.windows.codesign.password=$CODESIGN_PASSWORD -Dgephi.bundle.arch=${{
        matrix.arch }} -DstagingRepositoryId=${{ needs.build-base.outputs.staging-repository-id
        }} deploy -P deployment,sign-artifacts,${{ matrix.task }}
      shell: bash
      working-directory: modules/application
    - continue-on-error: true
      if: runner.os == 'macOS'
      name: CleanUp MacOS keychain
      run: ./.github/workflows/release/remove-key.sh
    - continue-on-error: true
      if: runner.os == 'Windows'
      name: CleanUp Windows codesign
      run: Remove-Item codesign.pfx
      working-directory: modules/application
    strategy:
      fail-fast: false
      matrix:
        arch:
        - x64
        include:
        - arch: x64
          os: ubuntu-latest
          task: create-targz
        - arch: aarch64
          os: ubuntu-latest
          task: create-targz
        - arch: x64
          os: windows-latest
          task: create-exe
        - arch: x64
          os: macos-latest
          task: create-dmg,notarize-dmg
        - arch: aarch64
          os: macos-latest
          task: create-dmg,notarize-dmg
        os:
        - ubuntu-latest
        - windows-latest
        - macos-latest
      max-parallel: 1
  update-site:
    needs: bundle
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: '11'
    - continue-on-error: true
      name: Retrieve autoupdate output
      uses: actions/download-artifact@v3
      with:
        name: autoupdate-output
        path: modules/application/target/autoupdate_site
    - continue-on-error: true
      name: Configure Git user
      run: 'git config --global user.email "github-action@users.noreply.github.com"

        git config --global user.name "GitHub Actions"

        '
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      name: Update autoupdate content on gh-pages
      run: mvn validate scm-publish:publish-scm -P push-site
      working-directory: modules/application
name: release
on:
  repository_dispatch:
    types: trigger-ga___release.yml
